// Code generated by "enumer -type=FrameworkType"; DO NOT EDIT.

//
package frontend

import (
	"fmt"
)

const _FrameworkTypeName = "AutoDetectNextJSVueJSSvelteKitSolidJSskipDetectNotFound"

var _FrameworkTypeIndex = [...]uint8{0, 10, 16, 21, 30, 37, 47, 55}

func (i FrameworkType) String() string {
	if i < 0 || i >= FrameworkType(len(_FrameworkTypeIndex)-1) {
		return fmt.Sprintf("FrameworkType(%d)", i)
	}
	return _FrameworkTypeName[_FrameworkTypeIndex[i]:_FrameworkTypeIndex[i+1]]
}

var _FrameworkTypeValues = []FrameworkType{0, 1, 2, 3, 4, 5, 6}

var _FrameworkTypeNameToValueMap = map[string]FrameworkType{
	_FrameworkTypeName[0:10]:  0,
	_FrameworkTypeName[10:16]: 1,
	_FrameworkTypeName[16:21]: 2,
	_FrameworkTypeName[21:30]: 3,
	_FrameworkTypeName[30:37]: 4,
	_FrameworkTypeName[37:47]: 5,
	_FrameworkTypeName[47:55]: 6,
}

// FrameworkTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FrameworkTypeString(s string) (FrameworkType, error) {
	if val, ok := _FrameworkTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FrameworkType values", s)
}

// FrameworkTypeValues returns all values of the enum
func FrameworkTypeValues() []FrameworkType {
	return _FrameworkTypeValues
}

// IsAFrameworkType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FrameworkType) IsAFrameworkType() bool {
	for _, v := range _FrameworkTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
